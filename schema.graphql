enum Status {
  ACTIVE
  FROZEN
  DESTROYED
  LISTED
}

enum EventType {
  FORCE_CREATE
  TRNASFER
  MINT
  BURN
  FREEZE
  THAWE
  CREATE
  DESTROY
  METADATA_SET
  METADATA_CLEAR
  ATTRIBUTE_SET
  ATTRIBUTE_CLEAR
  TEAM_CHANGE
  OWNER_CHANGE
  BOUGHT
  PRICE_SET
  PRICE_REMOVED
  MAX_SUPPLY_SET
}

enum Direction {
  FROM
  TO
}

type Account @entity {
  id: ID! #Account address
  uniqueInstances: [UniqueInstance!] @derivedFrom(field: "owner")
  uniqueTransfers: [AccountTransfer!] @derivedFrom(field: "account")
}

type AccountTransfer @entity {
  id: ID!
  event: UniqueEvent!
  account: Account!
  direction: Direction!
}

type UniqueEvent @entity {
  id: ID! # Event id
  from: String @index
  to: String @index # If tranferring / minting
  price: BigInt @index # If bought
  uniqueClass: UniqueClass # Class related events
  uniqueInstance: UniqueInstance # Instance related events
  type: EventType! @index
  timestamp: DateTime! @index
  blockHash: String!
  blockNum: Int! @index
}

type UniqueClass @entity {
  id: ID!
  owner: String @index
  admin: String
  issuer: String
  creator: String
  freezer: String
  status: Status! @index
  instances: [UniqueInstance!] @derivedFrom(field: "uniqueClass")
  events: [UniqueEvent!] @derivedFrom(field: "uniqueClass")
  metadata: String
  attributes: [Attribute!]!
  maxSupply: Int
  createdAt: DateTime! @index
}

type UniqueInstance @entity {
  id: ID!
  innerID: Int! @index
  uniqueClass: UniqueClass!
  owner: Account!
  status: Status! @index
  events: [UniqueEvent!] @derivedFrom(field: "uniqueInstance")
  metadata: String
  attributes: [Attribute!]!
  price: BigInt! @index
  mintedAt: DateTime! @index
}

type Attribute @jsonField {
  key: String
  value: String!
}
